% -*- mmm-noweb-code-mode: awk-mode -*-
 
\documentclass[12pt]{article}

%{{{ Preamble

\usepackage{mathptmx}
\usepackage[margin=1in]{geometry}
\usepackage[longchunks,breakcode]{knoweb}
\usepackage{fancyvrb,syntax}
\usepackage{ifpdf,xspace}

\ifpdf
  \usepackage[pdftex,colorlinks,backref,bookmarks
  ,pdftitle={Awk Filters for Automatically Indexing Noweb Source Files}
  ,pdfauthor={Joseph Riel}
  ,pdfpagemode={UseOutline}
  ,bookmarksopen={true}
  ]{hyperref}
\else
  \usepackage[dvips,backref]{hyperref}
\fi

\newcommand{\bs}{\textbackslash}
\newcommand{\comment}[1]{\textcolor{red}{\emph{#1}}}
\newcommand{\package}[1]{\textsf{#1}\xspace}
\newcommand{\file}[1]{\textsf{#1}\xspace}
\newcommand{\env}[1]{\textsf{#1}\xspace}
\newcommand{\cmd}[1]{\textsf{#1}\xspace}

\newcommand{\noweb}{\package{noweb}}
\newcommand{\noweave}{\package{noweave}}
\newcommand{\notangle}{\package{notangle}}

\newcommand{\gawk}{\cmd{awk}}

\pagestyle{noweb}

% Adjust float placement

\renewcommand{\bottomfraction}{0.5}

%}}}

\title{Awk Filters for Automatically Indexing \\ Noweb Source Files}
\author{Joseph S. Riel}
\date{6 September 2015}

\begin{document}

\maketitle

%{{{ Introduction

\section{Introduction}
\label{sec:introduction}


The \href{https://www.cs.tufts.edu/~nr/noweb/}{\noweb} system of literate programming
uses a pipeline approach that permits 
users to insert filters to modify its behavior.
Ramsey~\cite{ramsey01:NowebHackersGuide} describes in detail the pipeline
and its markup language.
Distributed with the package are filters
for automatically indexing symbols for several languages.

This package contains the source for filters for indexing 
Elisp, Maple, Matlab, and Python sources.

%}}}

\section{Installation}
\label{sec:installation}

The generated filters, which have names \texttt{autodefs.}\emph{filter},
must be installed in the directory with the standard autodefs filters.
On my Debian installation that is \texttt{/usr/lib/noweb}.  
Use the following command to display the installed filters.

\begin{verbatim}
  noweave -showautodefs
\end{verbatim}

\section{Usage}
\label{sec:usage}

Use these filters with the \texttt{-autodefs} \emph{filter} option of the \noweave command;
see the \noweave manpage for details.  To be useful, the \texttt{-index} option
should be passed to \noweave, after the filter.  For example.

\begin{verbatim}
  noweave -delay -autodefs maple -index Sample.nw > Sample.tex
\end{verbatim}

\section{Elisp Filter}

Assign the code for the Elisp filter.
The other filters reuse most of the chunks,
redefining the header, the regular expression, and the matching subgroup.

<<autodefs.elisp>>=
<<pound-bang>>
<<elisp header>>
<<generated file warning>>
<<copyright>>
BEGIN {
    <<clear [[codeflag]]>>
    <<assign elisp [[regex]] and [[subgroup]]>>
}
<<main loop>>
END {}
@ 

The actual ``pound-bang'' line is replaced by the \texttt{Makefile}
so that it is correct for each installation.  
Here we define the usual version.
%%
<<pound-bang>>=
#!/usr/bin/gawk --file
@ 

<<elisp header>>=
# An awk filter for auto-indexing an Elisp noweb source file.
@ 

<<generated file warning>>=
# This file was generated from the noweb source file autodefs.nw.
# The source documentation is in autodefs.pdf.
@
<<copyright>>=
# Copyright (c) 2005-2015 by Joseph S. Riel.  All rights reserved.
@ 


\subsection{In the Beginning}
\label{sec:beginning}

Set [[codeflag]] [[false]].
This flag is [[true]] when [[awk]] is processing a line in a code section.  
It does not need to be initialized [[false]] 
because the default value of an [[awk]] variable is [[0]], which corresponds to [[false]];
however, doing so is clearer.
%%
<<clear [[codeflag]]>>=
codeflag = <<false>>
@ %def codeflag

\subsubsection{Assign Regular Expression}
\label{sec:elisp:regular-expression}

Assign a regular expression, [[regex]], that matches
a code line with an indexable lisp symbol.
Assign the awk variable [[subgroup]] the number
of the subgroup in [[regex]] that matches the symbol.

<<assign elisp [[regex]] and [[subgroup]]>>=
regex = "<<noweb code line regex>><<elisp regex>>"
subgroup = 3
@ 

The \noweb [[markup]] filter 
prefices each code line with the string \lit{@text\textvisiblespace}.
Include any additional white space following it.
%%
<<noweb code line regex>>=
^@text<<mws>>
@

<<elisp regex>>=
\\(def(<<def-options>>|ine-(<<define-options>>))<<mws>>(<<elisp name regex>>)
@

<<def-options>>=
un|var|const|group|alias|subsubst|macro|custom|advice|image
@ 

<<define-options>>=
minor-mode|derived-mode|abbrev|category|prefix-command|key-after
@


%%
<<elisp name regex>>=
[^ \t\n()]+
@

Optional white space.
<<ows>>=
[ \t]*
@

Mandatory white space.
<<mws>>=
[ \t]+
@


\subsection{The Main Loop}
\label{sec:main-loop}


<<main loop>>=
<<if changing section, toggle [[codeflag]]>>
<<if not in a code section, pass-thru>>
<<if no index in line, pass-thru>>
{ <<insert index statement into stream>>
  <<print original line>>
}
@ 


\subsection{Tracking the Code Section}
\label{sec:track-code-sect}


A line starting with \lit{[[@begin code]]} or \lit{[[@end code]]}
indicates the beginning or end of a code section, respectively.  
Use this to toggle [[codeflag]].
Print the line and process the next line.
%%
<<if changing section, toggle [[codeflag]]>>=
($0 ~ /^@(begin|end) code /) {
    codeflag = !codeflag
    {print;next}
}
@

<<if not in a code section, pass-thru>>=
!codeflag {print;next}
@ 

\subsection{Checking for an Indexable Symbol}
\label{sec:check-an-index}

Match the current line, [[$0]], against [[regex]]
and store the results in [[arr]].  
If the line does not match, print the line and process the next line.
<<if no index in line, pass-thru>>=
!match($0, regex, arr) {print;next}
@ %def arr

\subsection{Indexing a Function Definition}

Insert the \noweb statement that indexes
the symbol into the output stream.
%%
<<insert index statement into stream>>=
print "@index defn", arr[subgroup]
@ 
%""


\subsection{Print the Original Line}
\label{sec:print-modified-line}

%%
<<print original line>>=
print
@ 


\subsection{Miscellaneous}
\label{sec:miscellaneous}


<<not in a code section>>=
!codeflag
@ 
<<true>>=
1
@ 
<<false>>=
0
@ 

\section{Maple Filter}

<<autodefs.maple>>=
<<pound-bang>>
<<maple header>>
<<generated file warning>>
<<copyright>>
BEGIN {
  <<clear [[codeflag]]>>
  <<assign maple [[regex]] and [[subgroup]]>>
}
<<main loop>>
END {}
@ 


<<maple header>>=
# An awk filter for auto-indexing a Maple noweb source file.
@ 

\subsection{Regular Expression}
\label{sec:maple:regular-expression}

<<assign maple [[regex]] and [[subgroup]]>>=
regex = "<<noweb code line regex>><<maple regex>>"
subgroup = 3
@ 

<<maple regex>>=
<<export or local>><<maple name>><<optional type>><<ows>>:=<<ows>>(proc|module)<<ows>>\\(
@ 

Optional qualifier.
<<export or local>>=
((export|local)<<mws>>)?
@

%%
<<maple name>>=
(<<maple symbol>>(<<maple index>>)?)
@
<<maple symbol>>=
(<<maple normal symbol>>|<<maple backquoted>>)
@
<<maple normal symbol>>=
[a-zA-Z_][a-zA-Z_0-9]*
@
<<maple backquoted>>=
`[^`]*`
@
<<maple index>>=
\\[[^[\\]]*\\]
@
%""

<<optional type>>=
(<<ows>>::<<ows>><<maple normal symbol>>)?
@



\section{Matlab Filter}
\label{sec:matlab-filter}

<<autodefs.matlab>>=
<<pound-bang>>
<<matlab header>>
<<generated file warning>>
<<copyright>>
BEGIN {
  <<clear [[codeflag]]>>
  <<assign matlab [[regex]] and [[subgroup]]>>
}
<<main loop>>
END {}
@ 

<<matlab header>>=
# An awk filter for auto-indexing a Matlab noweb source file.
@ 

\subsection{Regular Expression}
\label{sec:matlab:regular-expression}

<<assign matlab [[regex]] and [[subgroup]]>>=
regex = "<<noweb code line regex>><<matlab regex>>"
subgroup = 1
@ 

<<matlab regex>>=
function[ \t][^=]+=<<ows>>(<<matlab function name regex>>)
@

<<matlab function name regex>>=
[a-zA-Z][a-zA-Z_0-9]*
@

\section{Python Filter}
\label{sec:python-filter}

<<autodefs.python>>=
<<pound-bang>>
<<python header>>
<<generated file warning>>
<<copyright>>
BEGIN {
  <<clear [[codeflag]]>>
  <<assign python [[regex]] and [[subgroup]]>>
}
<<main loop>>
END {}
@ 

<<python header>>=
# An awk filter for auto-indexing a Python noweb source file.
@ 

\subsection{Regular Expression}
\label{sec:python:regular-expression}

<<assign python [[regex]] and [[subgroup]]>>=
regex = "<<noweb code line regex>><<python regex>>"
subgroup = 1
@ 

<<python regex>>=
def<<mws>>(<<python function name regex>>)
@

The Python reference manual specifies that an identifier
must start with a letter or underscore.
Additional characters may be letters, digits, or underscores.
%%
<<python function name regex>>=
[a-zA-Z_][a-zA-Z_0-9]*
@

\addcontentsline{toc}{section}{References}
\bibliographystyle{plain}
\bibliography{papers}


\addcontentsline{toc}{section}{Chunks}
\section*{Chunks} 
\nowebchunks

\addcontentsline{toc}{section}{Index}
\section*{Index}
\nowebindex



\end{document}
