% -*- mmm-noweb-code-mode: awk-mode -*-
\documentclass[12pt]{article}
\usepackage{mathptmx}
\usepackage[margin=1in]{geometry}
\usepackage[longchunks,breakcode]{knoweb}
\usepackage{fancyvrb,syntax}
\usepackage{ifpdf,xspace}
\usepackage{rcs}

\ifpdf
  \usepackage[pdftex,colorlinks,backref,bookmarks
  ,pdftitle={An Awk Filter for Automatically Indexing Elisp Noweb Source Files}
  ,pdfauthor={Joseph Riel}
  ,pdfpagemode={UseOutline}
  ,bookmarksopen={true}
  ]{hyperref}
\else
  \usepackage[dvips,backref]{hyperref}
\fi

\newcommand{\bs}{\textbackslash}
\newcommand{\comment}[1]{\textcolor{red}{\emph{#1}}}
\newcommand{\package}[1]{\textsf{#1}\xspace}
\newcommand{\file}[1]{\textsf{#1}\xspace}
\newcommand{\env}[1]{\textsf{#1}\xspace}
\newcommand{\cmd}[1]{\textsf{#1}\xspace}

\newcommand{\noweb}{\package{noweb}\xspace}
\newcommand{\noweave}{\package{noweave}\xspace}
\newcommand{\notangle}{\package{notangle}\xspace}

\newcommand{\awk}{\cmd{awk}}

\RCS $Revision: 1.1 $
\RCS $Date: 2005/09/02 00:18:03 $

\pagestyle{noweb}

% Adjust float placement

\renewcommand{\bottomfraction}{0.5}


\title{An Awk Filter for Automatically Indexing \\ Elisp Noweb Source Files}
\author{Joseph S. Riel}
\date{\normalsize
  Revision: \RCSRevision
  \qquad
  Last Commit: \RCSDate
}

\begin{document}

\maketitle



\section{Introduction}
\label{sec:introduction}


The \noweb system of literate programming
uses a pipeline approach that permits 
users to insert filters to modify its behaviour.
Ramsey~\cite{ramsey01:NowebHackersGuide} describes in detail the pipeline
and its markup language.
Distributed with the package are filters
for automatically indexing symbols for several languages.
Alas, a filter is not provided for Elisp.
Fortunately, with the pipelined approach it is straightforward to 
add a filter to do the job.



\section{Code}
\label{sec:code}



<<autodefs.elisp>>=
<<header>>
BEGIN {<<assign defaults>>}
<<main loop>>
END {}
@ 

The ``pound-bang'' line is inserted by the \texttt{Makefile}
so that it is correct for each installation.
%%
<<header>>=
# An awk filter for auto-indexing a Elisp noweb source file.
#
# Copyright (c) 2005 by Joseph S. Riel.  All rights reserved.
@ 


\subsection{In the Beginning}
\label{sec:beginning}


Set [[codeflag]] [[false]].
This flag is [[true]] when [[awk]] is processing a line
in a code section.  
It does not need to be initialized [[false]],
the default value of an [[awk]] variable is [[0]], which corresponds to [[false]];
however, doing so clarifies the intent.
%%
<<assign defaults>>=
codeflag = <<false>>
@ %def codeflag


\subsection{The Main Loop}
\label{sec:main-loop}


<<main loop>>=
<<changing section, update [[codeflag]]>> \
|| <<not in a code section>> \
|| <<no [[def]] in line>> \
   {print;next}
<<index function name>>
<<print original line>>
@ 


\subsection{Tracking the Code Section}
\label{sec:track-code-sect}



If the line starts with \lit{[[@begin code]]} or \lit{[[@end code]]}
then it indicates the beginning or end of a code section,
respectively.  
Set [[codeflag]] accordingly, and return [[true]].
%%
<<changing section, update [[codeflag]]>>=
($0 ~ /^@begin code /) && 
(codeflag = <<true>>) ||
($0 ~ /^@end code /) && 
(codeflag = <<false>>) && <<true>>
@



\subsection{Indexing a Function Definition}

<<index function name>>=
{if (<<match indexed symbol; assign [[arr]]>>)
    <<insert index statement into stream>>
}
@

%%
<<match indexed symbol; assign [[arr]]>>=
match($0,/<<[[def]] line regex>>(<<function name regex>>)/,arr)
@ %def arr
%$


Insert the \noweb statement that indexes
the symbol into the output stream.
%%
<<insert index statement into stream>>=
print "@index defn", arr[3]
@ 



\subsection{Print the Original Line}
\label{sec:print-modified-line}

%%
<<print original line>>=
{print}
@ 

\subsection{Miscellaneous}
\label{sec:miscellaneous}



<<not in a code section>>=
!codeflag
@ 


<<no [[def]] in line>>=
$0 !~ /<<[[def]] line regex>>/
@
%$ 


While it is not a requirement that a 
[[defun]], [[defvar]], or [[defconst]] statement
is indented flush-left, in practice it is.
%
<<[[def]] line regex>>=
<<noweb code line regex>><<elisp index regex>>
@

<<elisp index regex>>=
\(def(un|var|const|group|alias|subst|macro|custom|advice|image|ine-(<<defined regex>>))[ \t]
@

<<defined regex>>=
minor-mode|derived-mode|abbrev|category|prefix-command|key-after
@

The \noweb [[markup]] filter 
prefices each code line with the string \lit{@text }.
%%
<<noweb code line regex>>=
^@text[ ]
@

%%
<<function name regex>>=
[^ \t\n()]+
@


<<true>>=
1
@ 

<<false>>=
0
@ 


\addcontentsline{toc}{section}{References}
\bibliographystyle{plain}
\bibliography{papers}


\addcontentsline{toc}{section}{Chunks}
\section*{Chunks} 
\nowebchunks

\addcontentsline{toc}{section}{Index}
\section*{Index}
\nowebindex


\end{document}
